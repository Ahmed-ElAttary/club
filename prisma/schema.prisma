generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model members {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()"))
  member_code        Int                    @unique
  name               String?
  national_id        String?
  image_name         String?
  birth_date         DateTime?              @db.Date
  address            String?
  job                Int?
  job_address        String?
  job_tel            String?
  marital_status     Int?
  nationality        Int?
  religion           Int?
  sex                Int?
  tel                String?
  remark             String?
  member_type        Int?
  section            Int?
  city               Int?
  area               Int?
  qual               Int?
  trans              Int?
  id_1               Int?
  birth_place        String?
  user_id            String?
  join_date          DateTime?              @db.Date
  suspended          String?                @default("-")
  history            history[]
  rel_area           lookup_area?           @relation(fields: [area], references: [code])
  rel_city           lookup_city?           @relation(fields: [city], references: [code])
  rel_job            lookup_job?            @relation(fields: [job], references: [code])
  rel_marital_status lookup_marital_status? @relation(fields: [marital_status], references: [code])
  rel_member_type    lookup_member_type?    @relation(fields: [member_type], references: [code])
  rel_nationality    lookup_nationality?    @relation(fields: [nationality], references: [code])
  rel_qual           lookup_qual?           @relation(fields: [qual], references: [code])
  rel_religion       lookup_religion?       @relation(fields: [religion], references: [code])
  rel_section        lookup_section?        @relation(fields: [section], references: [code])
  rel_sex            lookup_sex?            @relation(fields: [sex], references: [code])
  rel_trans          lookup_trans?          @relation(fields: [trans], references: [code])
  rel_user           users?                 @relation(fields: [user_id], references: [id])
  rel_members        members_ref[]
  membership         memberships[]
}

model members_ref {
  id              String              @id @default(dbgenerated("gen_random_uuid()"))
  birth_date      DateTime?           @db.Date
  member_type     Int?
  member_code     Int?
  name            String?
  ref             Int?
  serial_no       Int?
  sex             Int?
  image_name      String?
  username        String?
  join_date       DateTime?           @db.Date
  user_id         String?
  deleted         Int                 @default(0)
  remark          String?
  suspended       String?             @default("-")
  member          members?            @relation(fields: [member_code], references: [member_code])
  rel_member_type lookup_member_type? @relation(fields: [member_type], references: [code])
  rel_ref         lookup_ref?         @relation(fields: [ref], references: [code])
  rel_sex         lookup_sex?         @relation(fields: [sex], references: [code])
  rel_user        users?              @relation(fields: [user_id], references: [id])
}

model memberships {
  id                  String          @id @default(dbgenerated("gen_random_uuid()"))
  start_date          DateTime?       @db.Date
  end_date            DateTime?       @db.Date
  status              Int?            @default(1)
  remark              String?
  member_code         Int?
  member_order_date   DateTime?       @default(now()) @db.Date
  member_order_time   DateTime?       @default(now()) @db.Timestamp(6) 
  delay_penalty       Float? @default(0)
  maintenance_fee     Float? @default(0)
  membership_card_fee Float? @default(0)
  renew_fee           Float? @default(0)
  renew_years         Int? @default(0)
  total_amount        Float? @default(0)
  value_added_tax     Float? @default(0)
  is_synced           Int             @default(0)
  safe_no             Int?
  serial_no           Int?            @default(autoincrement())
  user_id             String?
  swimming            Float? @default(0)
  first_time_fee      Float? @default(0)
  join_fee            Float? @default(0)
  form_no             Int? 
  installment         Float? @default(0)
  canceled            Int             @default(0)
  secondary           Int             @default(0)
  new_ref_fees          Float?        @default(0)
  seperate_fees Float? @default(0)
  prev_years_fee Float? @default(0)

  ref_member_id String?
  related_membership  String?
  rel_canceled        lookup_canceled @relation(fields: [canceled], references: [code])
  member              members?        @relation(fields: [member_code], references: [member_code])
  rel_status          lookup_status?  @relation(fields: [status], references: [id])
rel_secondary          lookup_secondary?  @relation(fields: [secondary], references: [code])
  rel_user            users?          @relation(fields: [user_id], references: [id])
}

model users {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  name        String        @unique
  email       String?       @unique
  password    String
  fullname    String?
  national_id String?
  safe_no     Int?
  history     history[]
  members     members[]
  members_ref members_ref[]
  memberships memberships[]
}

model history {
  id        Int      @id @default(autoincrement())
  user_id   String
  time      DateTime @default(now())
  action    String
  member_id String
  member    members  @relation(fields: [member_id], references: [id])
  user      users    @relation(fields: [user_id], references: [id])
}

model lookup_area {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_canceled {
  id         Int           @id @default(autoincrement())
  code       Int           @unique
  name       String
  membership memberships[]
}

model lookup_city {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_job {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_member_type {
  id          Int           @id @default(autoincrement())
  code        Int           @unique
  name        String
  price       Int?
  member      members[]
  members_ref members_ref[]
}

model lookup_qual {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_ref {
  id          Int           @id @default(autoincrement())
  code        Int           @unique
  name        String
  member_type String
  price       Int
  members_ref members_ref[]
}

model lookup_section {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_status {
  id         Int           @id @default(autoincrement())
  code       Int           @unique
  name       String
  tag        String
  membership memberships[]
}
model lookup_secondary {
  id         Int           @id @default(autoincrement())
  code       Int           @unique
  name       String

 membership memberships[]
}

model lookup_trans {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_sex {
  id          Int           @id @default(autoincrement())
  code        Int           @unique
  name        String
  members     members[]
  members_ref members_ref[]
}

model lookup_nationality {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_marital_status {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}

model lookup_religion {
  id      Int       @id @default(autoincrement())
  code    Int       @unique
  name    String
  members members[]
}
